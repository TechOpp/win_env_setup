personal access token for one month from 2Aug21: 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
For a new project create Repository on GitHub

OR, Clone any existing Repository if you want to develop its own copy of that project in other way
$git clone <URL>

Branch any repository if you want to fix a big bug or big changes in master repository and back meagre with master after bug fix.

>> Configuring and connecting to a remote repository
Master Repository	: Store on GitHub Server
Local Repository	: Store on your User Home space. This is called staging area, and when files are added in staging area it should be commit 
Working Directory	: Any location in your computer

To connect with GitHub server configure a configuration file in user home directory OR use following command (.gitconfig file )
$ git config -l
$ git config --global user.name "<your name>"
$ git config --global user.email "<your email>"

Now the user is enable to connect with GitHub Repository. Because these configuration information is neede by git command to run
Now make a clone of master Repo on Local computer. for that copy clone address of repo from GitHub
$ git clone <URL>
You can only push to two types of URL addresses:
An HTTPS URL like https://github.com/user/repo.git
An SSH URL, like git@github.com:user/repo.git

$ git remote add origin https://github.com/sunnykrbit/goLmart	// assign an existing repository to local repository
$ git remote set-url						// set new master repository
$ git remote remove origin					// Remove repo from git index
 
Now Master Repo is available in user Home space and a working directory in current location of CMD so work with this Working Directory. 
Any commit the changes in working directory will effect in local repository which is some where in user home space.
 Finally push this local repo to master repo after work has completed

Now Go inside new created working directory and write code, new file  manually or by any IDE or Software

>> Basic git commands
$ git remote		// This will shoe original means refer the remote Repository 
$ git remote -v		// Shoe URL or PATH or Remote Repo 
$ git status		// Show all changes in Working Directory with Local Repo if any. Changes in working file with local repo in red color
$ git add .			// Add all the changes in working directory with git command to commit in Local Repository. We can add a particular file with file name only OR any type of file with while card 
$ git status		// After adding changes with git command chang file will green other ramain red in color
$ git commit -m "Describe"	// Commit the changes made in the local working directory to the local repository. without any option git open vim like command prompt so you have to handle with that
=> Each commit is assigned a SHA-1 hash which enables you to refer back to the commit in other commands.
$ git push			// Push all the changes in Local Repo to Remote Repository. This will asked for user name and Password if your computer has not logged in to Git from the command line.

$ git diff			// compare current with previous commit
$ git mv			// if want to rename a file
$ git rm			// if want to delete, these command make changes in  staging area of a file and after that those file will change in repository
$ git diff --staged  // compare staging area
$ git log
$ git log --pretty=format:"%h %an %ar - %s"
$ git show

>>Pull or fetching updates from remote repository 
PULL command to get the latest updates from repmote repo and merge them into your local repository. It verifies local repo with remote repo are the same and prevents merge conflicts.
$ git pull			// Required before PUSH command when project is developed by other developer also.
$ git fetch			// get all changes and updates from remote repo  without merging them to local repo.

>> Deal with Git merge conflict
When multipeles peoples working on same files you are going to encounter merge conflict. When a conflict occurs, Git modifies your local files and it is up to you to manually fix the files with the conflicts.
git status will show merge conflict information. Now open the conflict file to start correcting the errors. 
Example: we had a text file with one line of text and in the local repository we added the text "update1" to the file. However, during the same time, the remote repository file was modified and added "update2" to the file on the same line. Git marks conflicts with "<<<<<<< HEAD" for lines in the current branch and everything after "=======" as the remote changes followed by ">>>>>>> < hash >" to mark the end.
Now take decision on each line of conflict, what do you want to keep, update or remove in conflict and finally remove all Git makings line from the files (<<<<,	>>>>) 
If there is more conflict the search the file with only HEAD
After Resolving all conflict with file save the file and do following git command
$ git add .
$ git commit -m "Fixed the merge conflict"
$ git push origin master
NOTE: git mergetool (WinMerge) is eassiar way to deal with lots of conflict.
$ git merge --abort		//  to abort the merge

>>Dealing with Branch
Creating a branch allows you to create a duplicate of the master (trunk) and make several updates without affecting the master. 
For example, when developing a program if a big fix was need that could take weeks or months, a branch could be created for that fix. 
Once you've fixed the bug, you could merge your branch back into the master.

$ git branch <New Branch> 		// create a branch in your local repository and working folder
$ git checkout <Branch Name>	// switch to the branch. Now prompt will change from master to brach to show where you are woring now. Now use all thing as master git but changes will in branch
$ git branch 			// show local repo branch only
$ git branch -a			// show all local and remote branches
$ git push --set-upstream origin <Branch Name>	// Push Branch to remote repository
$ git checkout master		// switch back to master repository
>> merge a branch back into the master or other branch
Go back or checkout to the master (or, other branch) in which you want to mearge the branch
$ git checkout master
$ git merge <Branch Name>		// Once in master (or other branch) run this command to mearge the branch
$ add the files to git
$ commit the added file in local repo
$ push the file to remote repo	// add to master if it is a file or folder as file or folder
>> delete local and remote branches after merging a branch you no longer want to keep the local or remote branch
$ git branch -d <Branch Name>		//Delete local branch
$ git push origin --delete <Branch Name>	// Delete Remote branch

$ git log		// log all commit 


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
A new repo from an existing project
Say you’ve got an existing project that you want to start tracking with git.

Go into the directory containing the project.
$ git init
$ git add .		//to add all of the relevant files.
You’ll probably want to create a .gitignore file right away, to indicate all of the files you don’t want to track. Use git add .gitignore, too.
$ git commit
Connect it to github
You’ve now got a local git repository. You can use git locally, like that, as you want. But if you want the thing to have a home on github, do the following.

Go to github.
Log in to your account.
Click the new repository button in the top-right. You’ll have an option there to initialize the repository with a README file, but I don’t.
Click the “Create repository” button.
Now, follow the second set of instructions, “Push an existing repository…”

$ git remote add origin git@github.com:username/new_repo	// ssl url
$ git push -u origin master
Actually, the first line of the instructions will say

$ git remote add origin https://github.com/username/new_repo	//HTTPS url

